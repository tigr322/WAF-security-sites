events {
    worker_connections 2048;
}

http {
 limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=search:10m rate=30r/m;
        # === SECURITY HEADERS ===
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server_tokens off;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=global:10m rate=100r/m;

    server {
        listen 80;
        server_name _;

        limit_req zone=global burst=100 nodelay;

        # Блокировка сканеров
        if ($http_user_agent ~* (sqlmap|acunetix|nessus|burp|metasploit)) {
            return 444;
        }

        # Блокировка методов
        if ($request_method !~ ^(GET|HEAD|POST)$) {
            return 444;
        }

        location / {
            # === 2. XSS ЗАЩИТА ===
            # Блокировка всех вариантов XSS
            if ($query_string ~* "(<script|javascript:|onmouse|onkey|onload|onerror|onfocus|onblur|vbscript:|expression\(|url\(|data:text/html|base64,)" ) {
                set $block_attack 1;
            }
                if ($query_string ~* "(<script|%3Cscript|%3cscript|javascript:|%6a%61%76%61%73%63%72%69%70%74%3a)" ) {
                    return 444;
                }
            if ($query_string ~* "(onerror|%6f%6e%65%72%72%6f%72|onload|%6f%6e%6c%6f%61%64|onclick|%6f%6e%63%6c%69%63%6b)" ) {
            return 444;
            }
        if ($query_string ~* "(alert|%61%6c%65%72%74|eval|%65%76%61%6c|expression|%65%78%70%72%65%73%73%69%6f%6e)" ) {
            return 444;
        }
         if ($query_string ~* "(%3C|%3E|%3C%2F|%3C%252F)(s|%73)(c|%63)(r|%72)(i|%69)(p|%70)(t|%74)" ) {
                return 444;
            }
             # Блокировка SVG и других тегов в URL-encoded виде
                if ($query_string ~* "(%3C|%3E)(s|%73)(v|%76)(g|%67|i|%69)(m|%6d)(g|%67|f|%66)(r|%72)(a|%61)(m|%6d)(e|%65)" ) {
                    return 444;
                }

                # Блокировка двойного кодирования
                if ($query_string ~* "(%25|%2525)(3C|33C|33c|3c|7c)" ) {
                    return 444;
                }
            # Блокировка тегов и атрибутов
            if ($query_string ~* "(<iframe|<object|<embed|<applet|<meta|<link|<style|<form|<input|@import)" ) {
                set $block_attack 1;
            }

            # Блокировка SVG и Math XSS
            if ($query_string ~* "(<svg|<math|onbegin|onend|onrepeat|onclick|onscroll)" ) {
                set $block_attack 1;
            }



            # Блокировка HTML entities
            if ($query_string ~* "(&lt;|&gt;|&quot;|&#x|&#[0-9]+;)" ) {
                set $block_attack 1;
            }

            # === 3. PATH TRAVERSAL ДОПОЛНЕНИЯ ===
            # Блокировка .git и служебных папок
            if ($query_string ~* "\.git/|\.svn/|\.hg/|\.bzr/") {
                set $block_attack 1;
            }

            # Блокировка Windows paths


            # Блокировка null byte и case variations
            if ($query_string ~* "%00|\.\.[\\/]|\.\.%2f|\.\.%5c") {
                set $block_attack 1;
            }

            # === 4. COMMAND INJECTION ===
            # Блокировка всех видов инъекций команд
            if ($query_string ~* "[;\|&`\$\(\)]" ) {
                set $block_attack 1;
            }

            # Блокировка subshell и advanced injection
            if ($query_string ~* "(\\$\{|\`\`|\(\(|\)\)|exec\(|system\(|passthru\()" ) {
                set $block_attack 1;
            }

            # === 5. NOSQL INJECTION ===
            # Блокировка MongoDB операторов
            if ($query_string ~* "(\$where|\$ne|\$gt|\$gte|\$lt|\$lte|\$in|\$nin|\$exists|\$type|\$mod|\$regex|\$text|\$expr|\$jsonSchema|\$size|\$all|\$elemMatch|\$or|\$and|\$not|\$nor)" ) {
                set $block_attack 1;
            }

            # Блокировка NoSQL паттернов
            if ($query_string ~* "(\[\$|\{\s*\"\$)" ) {
                set $block_attack 1;
            }

            # === 6. SSI INJECTION ===
            # Блокировка SSI директив
            if ($query_string ~* "(<!--#|#include|#exec|#echo|#set|#if|#else|#endif|#config)" ) {
                set $block_attack 1;
            }

            # === 7. XXE INJECTION ===
            # Блокировка XXE паттернов
            if ($query_string ~* "(<!ENTITY|<!DOCTYPE|SYSTEM|PUBLIC|%[a-zA-Z]|CDATA\[|]]>)" ) {
                set $block_attack 1;
            }

            # Блокировка XML внешних entities
            if ($query_string ~* "(\?>&[a-zA-Z];|<\!ELEMENT)" ) {
                set $block_attack 1;
            }

            # === 8. PROTOCOL HANDLERS ===
            # Блокировка опасных протоколов
            if ($query_string ~* "(file://|ftp://|php://|zlib://|data://|expect://|phar://)" ) {
                set $block_attack 1;
            }

            # Блокировка PHP фильтров
            if ($query_string ~* "(php://filter|convert.base64)" ) {
                set $block_attack 1;
            }

            # === 9. SCANNERS & BOTS ДОПОЛНЕНИЯ ===
            # Блокировка сканеров безопасности
            if ($http_user_agent ~* "(nmap|nikto|wpscan|zap|w3af|havij|appscan|sqlmap|acunetix|nessus|burp|metasploit)" ) {
                set $block_attack 1;
            }

            # === 10. AUTOMATION TOOLS ===
            # Блокировка инструментов автоматизации
            if ($http_user_agent ~* "(wget|curl|python|go-http|node|java|perl|libwww)" ) {
                set $block_attack 1;
            }

            # === 11. BOTS & CRAWLERS ===
            # Блокировка ботов и краулеров
            if ($http_user_agent ~* "(bot|spider|crawler|scraper|harvest|collector|scan|fetcher)" ) {
                set $block_attack 1;
            }

            # === 12. DANGEROUS FILES ===
            # Блокировка доступа к опасным файлам
            location ~* "\.(sql|ini|config|bak|backup|old|save|tar|gz|zip|7z)$" {
                deny all;
                return 444;
            }

            location ~* "(backup\.sql|config\.ini|web\.config|phpinfo\.php|admin\.php|dump\.sql|backup\.zip|logs\.txt)$" {
                deny all;
                return 444;
            }

            location ~ /\.(git|svn|hg|bzr) {
                deny all;
                return 444;
            }

            # === ДОПОЛНИТЕЛЬНЫЕ МЕРЫ БЕЗОПАСНОСТИ ===

            # Блокировка User-Agent содержащих shell
            if ($http_user_agent ~* "(shell|bash|cmd|powershell|winrm|ssh|telnet)" ) {
                set $block_attack 1;
            }

            # Блокировка подозрительных заголовков
            if ($http_cookie ~* "(base64_|eval\(|fromCharCode|document\.|window\.)" ) {
                set $block_attack 1;
            }

            # Блокировка SQL комментариев и хекс-кодирования
            if ($query_string ~* "(0x[0-9a-fA-F]+|-- |/\*|\*/|#.*$)" ) {
                set $block_attack 1;
            }

            # Блокировка длинных запросов (потенциальный buffer overflow)


            # Применение блокировки
            if ($block_attack = 1) {
                return 444;
            }

            # Блокировка опасных HTTP методов
            if ($request_method ~ ^(PUT|DELETE|TRACE|OPTIONS|PATCH)$ ) {
                return 444;
            }
            # Основные SQL инъекции
            if ($args ~* (union.*select|insert.*into|drop.*table|or.*1.*=.*1)) {
                return 444;
            }
            if ($args ~* ([Uu][Nn][Ii][Oo][Nn].*[Ss][Ee][Ll][Ee][Cc][Tt]|[Ss][Ee][Ll][Ee][Cc][Tt].*[Ff][Rr][Oo][Mm])) {
                            return 444;
                        }
            if ($args ~* (%253Cscript|%253C%252Fscript|javascript%253A)) {
                        return 444;
                    }

            if ($args ~* ('.*and.*=.*|'.*or.*=.*|and.*\(.*\).*=.*|or.*\(.*\).*=.*)) {
                return 444;
             }
               if ($args ~* (%27.*%20or%20|%27.*%20and%20|%20or%20%27%27=%27|%20and%20%27%27=%27)) {
                             return 444;
                         }
            if ($args ~* (and.*if\(.*\).*=|or.*if\(.*\).*=|case.*when.*then)) {
                return 444;
            }

            if ($args ~* (<script|javascript:|alert\(|onclick)) {
                return 444;
            }

            # Path traversal
            if ($request_uri ~* (\.\./\.\./|/etc/passwd|\.env)) {
                return 444;
            }

           proxy_pass http://127.0.0.1:80;
           proxy_set_header Host $http_host;
        }

        location = /health {
            return 200 "healthy\n";
        }
    }
}